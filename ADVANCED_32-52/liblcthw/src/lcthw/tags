!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DArray	darray.h	/^typedef struct DArray{$/;"	s
DArray	darray.h	/^}DArray;$/;"	t	typeref:struct:DArray
DArray_count	darray.h	32;"	d
DArray_end	darray.h	31;"	d
DArray_first	darray.h	30;"	d
DArray_free	darray.h	63;"	d
DArray_get	darray.h	/^static inline void *DArray_get(DArray * array, int i){$/;"	f
DArray_last	darray.h	29;"	d
DArray_max	darray.h	33;"	d
DArray_new	darray.h	/^static inline void *DArray_new(DArray * array){$/;"	f
DArray_set	darray.h	/^static inline void DArray_set(DArray * array, int i, void *element){$/;"	f
DEFAULT_EXPAND_RATE	darray.h	35;"	d
LIST_FOREACH	list.h	38;"	d
List	list.h	/^typedef struct List{$/;"	s
List	list.h	/^}List;$/;"	t	typeref:struct:List
ListNode	list.h	/^typedef struct ListNode{  \/\/ This is a double linked list node$/;"	s
ListNode	list.h	/^}ListNode;$/;"	t	typeref:struct:ListNode
ListNode_swap	list_algos.c	/^inline void ListNode_swap(ListNode * a, ListNode *b){$/;"	f
List_bubble_sort	list_algos.c	/^int List_bubble_sort(List *list, List_compare cmp){$/;"	f
List_clear	list.c	/^void List_clear(List * list)$/;"	f
List_clear_destroy	list.c	/^void List_clear_destroy(List * list)$/;"	f
List_compare	list_algos.h	/^typedef int (*List_compare) (const void *a , const void *b);$/;"	t
List_count	list.h	26;"	d
List_create	list.c	/^List *List_create()$/;"	f
List_destroy	list.c	/^void List_destroy(List * list)$/;"	f
List_first	list.h	27;"	d
List_last	list.h	28;"	d
List_merge	list_algos.c	/^inline List *List_merge(List * left, List * right, List_compare cmp){$/;"	f
List_merge_sort	list_algos.c	/^List *List_merge_sort(List * list, List_compare cmp){$/;"	f
List_pop	list.c	/^void *List_pop(List * list)$/;"	f
List_push	list.c	/^void List_push(List * list, void *value)$/;"	f
List_remove	list.c	/^void *List_remove(List * list, ListNode * node)$/;"	f
List_shift	list.c	/^void *List_shift(List * list)$/;"	f
List_unshift	list.c	/^void List_unshift(List * list , void *value)$/;"	f
_DArray_h	darray.h	2;"	d
__dbg_h__	dbg.h	2;"	d
check	dbg.h	28;"	d
check_debug	dbg.h	36;"	d
check_mem	dbg.h	34;"	d
clean_errno	dbg.h	15;"	d
contents	darray.h	/^    void **contents;$/;"	m	struct:DArray
count	list.h	/^    int count;$/;"	m	struct:List
debug	dbg.h	11;"	d
debug	dbg.h	9;"	d
element_size	darray.h	/^    size_t element_size;$/;"	m	struct:DArray
end	darray.h	/^    int end;$/;"	m	struct:DArray
expand_rate	darray.h	/^    size_t expand_rate;$/;"	m	struct:DArray
first	list.h	/^    ListNode *first;$/;"	m	struct:List
last	list.h	/^    ListNode *last;$/;"	m	struct:List
lcthw_List_algos_h	list_algos.h	2;"	d
lcthw_List_h	list.h	2;"	d
log_err	dbg.h	17;"	d
log_info	dbg.h	25;"	d
log_warn	dbg.h	21;"	d
max	darray.h	/^    int max;$/;"	m	struct:DArray
next	list.h	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
prev	list.h	/^    struct ListNode *prev;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
sentinel	dbg.h	31;"	d
value	list.h	/^    void *value;$/;"	m	struct:ListNode
